---
import '@fontsource/ubuntu';
import "../styles/global.css";
import { SEO } from "astro-seo";
import Navbar from '../components/Navbar.astro';
import Subscribe from '../components/Subscribe.astro';
import Footer from '../components/Footer.astro';

interface Props {
	navbarBordered?: boolean
	title?: string
	description?: string
}

const { navbarBordered = false, title, description } = Astro.props

const config = {
	title: title ? `${title} - Narakode` : 'Narakode - Tempat Belajar Pemrograman dengan Materi Lengkap',
	description: description ?? 'Mari mulai belajar pemrograman dari level dasar hingga lanjutan untuk menjadi programmer profesional, mulai dari HTML, CSS, JavaScript, dan masih banyak lagi.',
	image: new URL('/banner.png', Astro.url.origin).href,
}
---

<!doctype html>
<html lang="id">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
		<link rel="manifest" href="/favicon/site.webmanifest">
		<link rel="sitemap" href="/sitemap-index.xml" />
		<SEO
			title={config.title}
			description={config.description}
			openGraph={{
				basic: {
					title: config.title,
					type: "website",
					image: config.image,
				},
				optional: {
					description: config.description
				}
			}}
			twitter={{
				card: 'summary',
				site: '@narakode',
				creator: "@narakode",
				title: config.title,
				description: config.description,
				image: config.image,
				imageAlt: config.title
			}}
		/>
	</head>
	<body class="bg-gray-100 min-h-screen flex flex-col justify-between">
		<div>
			<Navbar bordered={navbarBordered} />

			<slot />
		</div>
		
		<Subscribe />
		<Footer />
	</body>
	<script>
		const dropdownToggles = document.querySelectorAll<HTMLElement>('[data-toggle]')

		dropdownToggles.forEach(toggle => {
			if (toggle.dataset.toggle) {
				const target = document.querySelector(`${toggle.dataset.toggle}`)

				toggle.addEventListener('click', () => {
					toggle.classList.toggle('toggle-open')
					target?.classList.toggle('hidden')
				})
			}
		})

		const clickOutsides = document.querySelectorAll<HTMLElement>('[data-click-outside]')

		clickOutsides.forEach(target => {
			const trigger = document.querySelector(`${target.dataset.trigger}`)

			document.addEventListener('click', e => {
				const clicked = e.target as HTMLElement

				if (trigger) {
					if (!target?.contains(clicked) && !trigger.contains(clicked)) {
						target?.classList.add('hidden')
						trigger.classList.remove('toggle-open')
					}
				} else {
					if (!target?.contains(clicked)) {
						target?.classList.add('hidden')
					}
				}				
			})
		})
	</script>
</html>